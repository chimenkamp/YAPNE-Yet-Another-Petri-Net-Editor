[
    {
        "name": "Dining Philosophers",
        "description": "Dining Philosophers problem with 3 philosophers",
        "path": "examples/dining-philosophers.json"
    },
    {
        "name": "Simple Producer-Consumer",
        "description": "Simple Producer-Consumer problem with 1 producer and 1 consumer",
        "path": "examples/simple-producer-consumer.json"
    },
    {
        "name": "Mutual Exclusion",
        "description": "Mutual Exclusion problem",
        "path": "examples/mutual-exclusion.json"
    },
    {
        "name": "Banker's Algorithm",
        "description": "Banker's Algorithm problem",
        "path": "examples/banker-algorithm.json"
    },
    {
        "name": "DPN - Fibonacci(n)",
        "description": "A Data Petri Net that computes the Fibonacci number for a given n",
        "path": "examples/DPN-Fibonacci(n).json"
    },
    {
        "name": "DPN: Simple Order Processing with Data",
        "description": "A data Petri net example of a simple order processing system",
        "path": "examples/DPN-Order-Processing.json"
    },
    {
        "name": "DPN: Simple Auction Process Data Petri Net",
        "description": "A Data Petri Net representing a simple auction process as shown in Example 1 from the paper. The last offer is stored in 'o' and time progression is captured by 't'",
        "path": "examples/auction-process-dpn.json"
    },
    {
        "name": "DPN: Soundness Control Flow with Guards",
        "description": "Test Soundness of a Data Petri Net with guards and data variables",
        "path": "examples/soundness_proba_CF_GUARDS.json"
    }
]